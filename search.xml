<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring源码编译</title>
    <url>/2021/02/09/spring%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<p>为了有助于spring源码的学习，方便在源码中断点、写注释、我们需要自己将源码编译好。</p>
<a id="more"></a>

<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="[1] 准备工作"></a>[1] 准备工作</h2><ul>
<li><strong>JDK1.8版本</strong></li>
<li><strong>Spring源码下载 版本：5.2.8.RELEASE</strong><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --branch v5.2.8.RELEASE https://gitee.com/Z201/spring-framework.git</span><br></pre></td></tr></table></figure></li>
<li><strong>gradle安装</strong></li>
</ul>
<p>1.下载地址 <code>https://gradle.org/releases/</code></p>
<p>  <img src="https://tva3.sinaimg.cn/large/e773048fly1gnh4ve2ev4j20iq078aad.jpg" alt="1"></p>
<p>2.环境变量配置</p>
<p><strong>说明：</strong></p>
<p>将下载好的grandle解压到某个目录,如：D:\work\gradle下。</p>
<p>建立gradle的user_home文件夹，如：D:\work\gradle\gradle_repos用来存放一些下载包，不然默认是在c盘下。</p>
<p>2.1 配置<code>GRADLE_HOME</code></p>
<p><img src="https://tva3.sinaimg.cn/mw690/e773048fly1gnh78yw2f1j20i004s0sp.jpg" alt="image"></p>
<p><img src="https://tva3.sinaimg.cn/mw690/e773048fly1gnh79rq87dj20e705caa1.jpg" alt="image"></p>
<p>2.2 配置<code>GRADLE_USER_HOME</code></p>
<p><img src="https://tvax3.sinaimg.cn/large/e773048fly1gnh5mia14wj20hy04it8o.jpg" alt="image"></p>
<h2 id="2-源码配置以及编译"><a href="#2-源码配置以及编译" class="headerlink" title="[2]源码配置以及编译"></a>[2]源码配置以及编译</h2><ul>
<li><strong>修改<code>settings.gradle</code>文件</strong></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>修改<code>gradle.properties</code>文件</strong></li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">version</span>=<span class="string">5.2.8.RELEASE</span></span><br><span class="line"><span class="meta">org.gradle.jvmargs</span>=<span class="string">-Xmx2048M</span></span><br><span class="line"><span class="meta">org.gradle.caching</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">org.gradle.parallel</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">org.gradle.configureondemand</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">org.gradle.daemon</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>修改<code>build.gradle</code>文件</strong></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意：一定要加到mavenCentral()前面</span></span><br><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>编译<code>spring-oxm</code>模块</strong></li>
</ul>
<p>到源码的根目录，打开cmd，执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gradlew :spring-oxm:compileTestJava</span><br></pre></td></tr></table></figure>


<h2 id="3-导入idea"><a href="#3-导入idea" class="headerlink" title="[3]导入idea"></a>[3]导入idea</h2><ul>
<li><p><strong>安装kotlin（一般都已经安装了）</strong></p>
</li>
<li><p><strong>修改idea setting</strong></p>
</li>
</ul>
<p><img src="https://tvax3.sinaimg.cn/mw690/e773048fly1gnh74ixrnfj20m60b5tan.jpg" alt="image"></p>
<ul>
<li><strong>spring源码导入</strong></li>
</ul>
<p><img src="https://tvax1.sinaimg.cn/mw690/e773048fly1gnh726kuzvj20in09c74p.jpg" alt="image"></p>
<p><img src="https://tvax1.sinaimg.cn/mw690/e773048fly1gnh73dbsroj20kf09kaab.jpg" alt="image"></p>
<p><img src="https://tvax2.sinaimg.cn/mw690/e773048fly1gnh70wy0j5j20ne09pt8y.jpg" alt="image"></p>
]]></content>
      <categories>
        <category>spring源码系列</category>
      </categories>
      <tags>
        <tag>源码编译</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 程序入口和xml解析</title>
    <url>/2021/02/09/spring-%E7%A8%8B%E5%BA%8F%E5%85%A5%E5%8F%A3%E5%92%8Cxml%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>新建<code>spring-demo</code>，引入自己编译的源码jar，开始spring的源码探索。</p>
<a id="more"></a>

<h1 id="1-构建spring-demo项目"><a href="#1-构建spring-demo项目" class="headerlink" title="[1] 构建spring-demo项目"></a>[1] 构建spring-demo项目</h1><ul>
<li><p><strong>idea新建maven项目<code>spring-demo</code></strong></p>
</li>
<li><p><strong>spring依赖</strong></p>
<p>spring最核心的jar: spring-bean、spring-core、spring-context、spring-expression</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述<code>$&#123;spring.version&#125;</code>为<code>5.2.8.RELEASE</code>，理论上讲一个最基本的spring项目，只需要依赖context，context本身依赖了spring-aop、Sspring-beans、spring-core、spring-expression</p>
<p><img src="https://tvax4.sinaimg.cn/large/e773048fly1gnhk03a0uoj20jh040dfv.jpg" alt="image"></p>
<ul>
<li><strong>日志打印依赖</strong></li>
</ul>
<p>日志打印也是需要引入的，源码里有很多地方有log日志输出。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="2-导入spring源码到demo工程"><a href="#2-导入spring源码到demo工程" class="headerlink" title="[2] 导入spring源码到demo工程"></a>[2] 导入spring源码到demo工程</h1><p>idea打开 <code>FIle-&gt;Project Structure-&gt;libraries</code> ，选中想要导入的模块，如：<code>spring-context</code>，点击<code>+</code>，分别添加相关<code>lib</code>以及<code>sources</code>.</p>
<p><img src="https://tva1.sinaimg.cn/large/e773048fly1gni9ajo62lj21ao0nd777.jpg" alt="image"></p>
<p><img src="https://tva3.sinaimg.cn/large/e773048fly1gni9dx0f9hj20m50e874x.jpg" alt="image"></p>
<p><img src="https://tva3.sinaimg.cn/large/e773048fly1gni9eoizcij20lz0e93z4.jpg" alt="image"></p>
<p>像<code>spring-core</code>、<code>spring-bean</code>也要依次添加。（后续像<code>aop</code>、<code>mvc</code>的学习也如此操作即可。）</p>
<h1 id="3-spring-容器加载方式"><a href="#3-spring-容器加载方式" class="headerlink" title="[3] spring 容器加载方式"></a>[3] spring 容器加载方式</h1><ul>
<li><strong>1、类路径获取配置文件</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>2、文件系统路径获取配置文件[绝对路径]</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;F:\\work\\workspace_spring\\spring-demo\\src\\main\\resources\\spring.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>3、基于注解加载容器</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.xx.jack&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>4、springboot 加载容器</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> EmbeddedWebApplicationContext();</span><br></pre></td></tr></table></figure>
<p>无论是上面哪一种方式加载上下文，spring 容器的初始化工作在<code>new</code>构造方法里就全部完成了。1、2是我们的传统手艺，3、4就是丢弃<code>spring.xml</code>配置，基于注解的形式加载容器，像beanDefinition的收集工作主要是在<code>ConfigurationClassPostProcessor</code>中完成的。（后续的文章中我会写到）</p>
<p><code>本文主要分析方式1。</code></p>
<h1 id="4-ClassPathXmlApplicationContext源码分析"><a href="#4-ClassPathXmlApplicationContext源码分析" class="headerlink" title="[4] ClassPathXmlApplicationContext源码分析"></a>[4] ClassPathXmlApplicationContext源码分析</h1><p>在看源码之前，先来看下类的继承关系。</p>
<p><img src="https://tva2.sinaimg.cn/large/e773048fly1gniafea3b3j21fd0ofmz4.jpg" alt="image"></p>
<p>着重注意下<code>AbstractApplicationContext</code>，基本上所有的上下文都会继承这个抽象类（至少我看了这么多的上下文，都会继承它），它里面有一个模板方法refresh()，在我看来，它是spring里面最重要的方法，后续文章中会着重分析这个方法。</p>
<h2 id="spring-初始化核心流程"><a href="#spring-初始化核心流程" class="headerlink" title="spring 初始化核心流程"></a>spring 初始化核心流程</h2><ul>
<li><code>├─</code> refresh <span data-vc="" class="badge warning">Spring 初始化入口</span></li>
<li><code>│ ├─</code> prepareRefresh <span data-vc="" class="badge">① 初始化一些参数，设置启动时间和active标志</span></li>
<li><code>│ ├─</code> <strong>obtainFreshBeanFactory</strong>  <span data-vc="" class="badge">② 创建 BeanFactory</span> <span data-vc="" class="badge error">本节主要跟踪的源码流程</span></li>
<li><code>│ ├─</code> prepareBeanFactory <span data-vc="" class="badge">③ 设置 BeanFactory 的基本属性</span></li>
<li><code>│ ├─</code> postProcessBeanFactory <span data-vc="" class="badge">④ benFactory的后置处理，可以在subClass中注册一些bean</span> </li>
<li><code>│ ├─</code> invokeBeanFactoryPostProcessors <span data-vc="" class="badge">⑤ 提前实例化impl BeanFactoryPostProcessor的类，并invoke</span> </li>
<li><code>│ ├─</code> registerBeanPostProcessors <span data-vc="" class="badge"> ⑥ 实例化impl BeanPostProcessor的类，并注册到beanFacotry</span> </li>
<li><code>│ ├─</code> initMessageSource <span data-vc="" class="badge">⑦ 初始化资源文件，如国际化文件的处理等</span></li>
<li><code>│ ├─</code> initApplicationEventMulticaster <span data-vc="" class="badge">⑧ 初始化事件管理类</span></li>
<li><code>│ ├─</code> onRefresh <span data-vc="" class="badge">⑨ 给子类扩展初始化其他Bean，springboot 中用来做内嵌 tomcat 启动</span></li>
<li><code>│ ├─</code> registerListeners <span data-vc="" class="badge">⑩ 在所有bean中查找listeners，然后注册到广播器中</span></li>
<li><code>│ ├─</code> finishBeanFactoryInitialization <span data-vc="" class="badge"> ⑪ 完成bean实例化</span></li>
<li><code>│ └─</code> finishRefresh <span data-vc="" class="badge">⑫ 完成refresh，发布相应事件</span></li>
</ul>
<h2 id="├─-testApplicationContext"><a href="#├─-testApplicationContext" class="headerlink" title="├─ testApplicationContext()"></a>├─ testApplicationContext()</h2><blockquote class="customNote note info">
编写一个测试用例。
</blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="├─-ClassPathXmlApplicationContext"><a href="#├─-ClassPathXmlApplicationContext" class="headerlink" title="├─ ClassPathXmlApplicationContext()"></a>├─ ClassPathXmlApplicationContext()</h2><blockquote class="customNote note info">
<p>
    调用ClassPathXmlApplicationContext()构造。
    </p><p>
        类：org.springframework.context.support.<code>ClassPathXmlApplicationContext</code>
    </p></blockquote>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我在源码理解写注释，目的是为了更好的理解源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>(<span class="keyword">new</span> String[] &#123;configLocation&#125;, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			String[] configLocations, <span class="keyword">boolean</span> refresh, <span class="meta">@Nullable</span> ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">super</span>(parent);</span><br><span class="line">		setConfigLocations(configLocations);</span><br><span class="line">		<span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">            <span class="comment">// 最核心的就是这个方法。调用到了父类AbstractApplicationContext.refresh()</span></span><br><span class="line">			refresh();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="├─-setConfigLocations"><a href="#├─-setConfigLocations" class="headerlink" title="├─ setConfigLocations()"></a>├─ setConfigLocations()</h2><blockquote class="customNote note info">
<p>
    调用setConfigLocations()方法，将传入的location,如<code>spring.xml</code>封装成configLocations数组。
    </p><p>
        类：org.springframework.context.support.<code>AbstractRefreshableConfigApplicationContext</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocations</span><span class="params">(<span class="meta">@Nullable</span> String... locations)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</span><br><span class="line">		Assert.noNullElements(locations, <span class="string">&quot;Config locations must not be null&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.configLocations = <span class="keyword">new</span> String[locations.length];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locations.length; i++) &#123;</span><br><span class="line">               <span class="comment">// 模糊匹配，不需要细读。说白了， 就是路径可以是带有/**/Spring.xml</span></span><br><span class="line">			<span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">this</span>.configLocations = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="├─-refresh"><a href="#├─-refresh" class="headerlink" title="├─ refresh()"></a>├─ refresh()</h2><blockquote class="customNote note info">
<p>
    调用refresh()
    </p><p>
        类：org.springframework.context.support.<code>AbstractApplicationContext</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> *	该方法是spring容器初始化的核心方法。是spring容器初始化的核心流程，是一个典型的父类模板设计模式的运用</span></span><br><span class="line"><span class="comment"> *	根据不同的上下文对象，会掉到不同的上下文对象子类方法中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *	核心上下文子类有：</span></span><br><span class="line"><span class="comment"> *	ClassPathXmlApplicationContext</span></span><br><span class="line"><span class="comment"> *	FileSystemXmlApplicationContext</span></span><br><span class="line"><span class="comment"> *	AnnotationConfigApplicationContext</span></span><br><span class="line"><span class="comment"> *	EmbeddedWebApplicationContext(springboot)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方法重要程度：</span></span><br><span class="line"><span class="comment"> *  0：不重要，可以不看</span></span><br><span class="line"><span class="comment"> *  1：一般重要，可看可不看</span></span><br><span class="line"><span class="comment"> *  5：非常重要，一定要看</span></span><br><span class="line"><span class="comment"> *  必须读的 ：重要程度 5</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">		<span class="comment">//为容器初始化做准备，重要程度：0</span></span><br><span class="line">		<span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">		prepareRefresh();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		   重要程度：5</span></span><br><span class="line"><span class="comment">		  1、创建BeanFactory对象</span></span><br><span class="line"><span class="comment">		* 2、xml解析</span></span><br><span class="line"><span class="comment">		* 	传统标签解析：bean、import等</span></span><br><span class="line"><span class="comment">		* 	自定义标签解析 如：&lt;context:component-scan base-package=&quot;com.xiangxue.jack&quot;/&gt;</span></span><br><span class="line"><span class="comment">		* 	自定义标签解析流程：</span></span><br><span class="line"><span class="comment">		* 		a、根据当前解析标签的头信息找到对应的namespaceUri</span></span><br><span class="line"><span class="comment">		* 		b、加载spring所有jar中的spring.handlers文件。并建立映射关系</span></span><br><span class="line"><span class="comment">		* 		c、根据namespaceUri从映射关系中找到对应的实现了NamespaceHandler接口的类</span></span><br><span class="line"><span class="comment">		* 		d、调用类的init方法，init方法是注册了各种自定义标签的解析类</span></span><br><span class="line"><span class="comment">		* 		e、根据namespaceUri找到对应的解析类，然后调用paser方法完成标签解析</span></span><br><span class="line"><span class="comment">		*</span></span><br><span class="line"><span class="comment">		* 3、把解析出来的xml标签封装成BeanDefinition对象</span></span><br><span class="line"><span class="comment">		* */</span></span><br><span class="line">		<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">		ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 给beanFactory设置一些属性值，可以不看</span></span><br><span class="line"><span class="comment">		 * */</span></span><br><span class="line">		<span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">		prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">			postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * BeanDefinitionRegistryPostProcessor</span></span><br><span class="line"><span class="comment">			 * BeanFactoryPostProcessor</span></span><br><span class="line"><span class="comment">			 * 完成对这两个接口的调用</span></span><br><span class="line"><span class="comment">			 * */</span></span><br><span class="line">			<span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">			invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 把实现了BeanPostProcessor接口的类实例化，并且加入到BeanFactory中</span></span><br><span class="line"><span class="comment">			 * */</span></span><br><span class="line">			<span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">			registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 国际化,重要程度2</span></span><br><span class="line"><span class="comment">			 * */</span></span><br><span class="line">			<span class="comment">// Initialize message source for this context.</span></span><br><span class="line">			initMessageSource();</span><br><span class="line"></span><br><span class="line">			<span class="comment">//初始化事件管理类</span></span><br><span class="line">			<span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">			initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">			<span class="comment">//这个方法着重理解模板设计模式，因为在springboot中，这个方法是用来做内嵌tomcat启动的</span></span><br><span class="line">			<span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">			onRefresh();</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 往事件管理类中注册事件类</span></span><br><span class="line"><span class="comment">			 * */</span></span><br><span class="line">			<span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">			registerListeners();</span><br><span class="line"></span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			 * 这个方法是spring中最重要的方法，没有之一</span></span><br><span class="line"><span class="comment">			 * 所以这个方法一定要理解要具体看</span></span><br><span class="line"><span class="comment">			 * 1、bean实例化过程</span></span><br><span class="line"><span class="comment">			 * 2、ioc</span></span><br><span class="line"><span class="comment">			 * 3、注解支持</span></span><br><span class="line"><span class="comment">			 * 4、BeanPostProcessor的执行</span></span><br><span class="line"><span class="comment">			 * 5、Aop的入口</span></span><br><span class="line"><span class="comment">			 * */</span></span><br><span class="line">			<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">			finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">			finishRefresh();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">				logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">						<span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">			destroyBeans();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">			cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Propagate exception to caller.</span></span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">			<span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">			resetCommonCaches();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="├─-obtainFreshBeanFactory"><a href="#├─-obtainFreshBeanFactory" class="headerlink" title="├─ obtainFreshBeanFactory()"></a>├─ obtainFreshBeanFactory()</h2><blockquote class="customNote note info">
<p>
    调用obtainFreshBeanFactory(),获取beanFactory的入口。
    </p><p>
        类：org.springframework.context.support.<code>AbstractApplicationContext</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//核心方法，必须读，重要程度：5</span></span><br><span class="line">	refreshBeanFactory();</span><br><span class="line">	<span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="│-├─-refreshBeanFactory"><a href="#│-├─-refreshBeanFactory" class="headerlink" title="│ ├─ refreshBeanFactory()"></a>│ ├─ refreshBeanFactory()</h2><blockquote class="customNote note info">
<p>
    钩子方法，勾到子类<code>AbstractRefreshableApplicationContext</code>中的实现。
    </p><p>
        类：org.springframework.context.support.<code>AbstractRefreshableApplicationContext</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">//如果BeanFactory不为空，则清除BeanFactory和里面的实例</span></span><br><span class="line">   <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">      destroyBeans();</span><br><span class="line">      closeBeanFactory();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//BeanFactory 实例工厂</span></span><br><span class="line">      DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">      beanFactory.setSerializationId(getId());</span><br><span class="line">      <span class="comment">//设置是否可以循环依赖 allowCircularReferences</span></span><br><span class="line">      <span class="comment">//是否允许使用相同名称重新注册不同的bean实现.</span></span><br><span class="line">      customizeBeanFactory(beanFactory);</span><br><span class="line">      <span class="comment">//解析xml，并把xml中的标签封装成BeanDefinition对象</span></span><br><span class="line">      loadBeanDefinitions(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="│-├─-loadBeanDefinitions"><a href="#│-├─-loadBeanDefinitions" class="headerlink" title="│ ├─ loadBeanDefinitions()"></a>│ ├─ loadBeanDefinitions()</h2><blockquote class="customNote note info"><p>
    <code>xml解析的入口</code>，钩子方法，勾到子类<code>AbstractXmlApplicationContext</code>中的实现。
    </p><p>
        类：org.springframework.context.support.<code>AbstractXmlApplicationContext</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">   <span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class="line">   <span class="comment">//创建xml的解析器，这里是一个委托模式</span></span><br><span class="line">   XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Configure the bean definition reader with this context&#x27;s</span></span><br><span class="line">   <span class="comment">// resource loading environment.</span></span><br><span class="line">   beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line">   <span class="comment">//这里传一个this进去，因为ApplicationContext是实现了ResourceLoader接口的</span></span><br><span class="line">   beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">   beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line">   <span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">   initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">   <span class="comment">//主要看这个方法  重要程度 5</span></span><br><span class="line">   loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="customNote note info"><p>
    进入当前类中protect修饰的loadBeanDefinitions()重载方法，入参为beanDefinitionReader委托解析对象。
    </p><p>
        类：org.springframework.context.support.<code>AbstractXmlApplicationContext</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">   Resource[] configResources = getConfigResources();</span><br><span class="line">   <span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">      reader.loadBeanDefinitions(configResources);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取需要加载的xml配置文件</span></span><br><span class="line">   String[] configLocations = getConfigLocations();</span><br><span class="line">   <span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">      reader.loadBeanDefinitions(configLocations);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="customNote note info"><p>
    调用reader委托对象的loadBeanDefinitions()来进行解析。
    </p><p>
        类：org.springframework.beans.factory.support.<code>AbstractBeanDefinitionReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String... locations)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(locations, <span class="string">&quot;Location array must not be null&quot;</span>);</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (String location : locations) &#123;</span><br><span class="line">       <span class="comment">// localtion就是传入进来的 spring.xml 字符串</span></span><br><span class="line">      count += loadBeanDefinitions(location);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="customNote note info"><p>
    调用reader委托对象的loadBeanDefinitions()重载方法解析。
    </p><p>
        类：org.springframework.beans.factory.support.<code>AbstractBeanDefinitionReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, <span class="meta">@Nullable</span> Set&lt;Resource&gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">   <span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">&quot;Cannot load bean definitions from location [&quot;</span> + location + <span class="string">&quot;]: no ResourceLoader available&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line">      <span class="comment">// Resource pattern matching available.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//把字符串类型的xml文件路径，形如：classpath*:user/**/*-context.xml,转换成Resource对象类型，其实就是用流</span></span><br><span class="line">         <span class="comment">//的方式加载配置文件，然后封装成Resource对象，不重要，可以不看</span></span><br><span class="line">         Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line">         <span class="comment">//主要看这个方法 ** 重要程度 5</span></span><br><span class="line">         <span class="keyword">int</span> count = loadBeanDefinitions(resources);</span><br><span class="line">         <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Collections.addAll(actualResources, resources);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from location pattern [&quot;</span> + location + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> count;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">               <span class="string">&quot;Could not resolve bean definition resource pattern [&quot;</span> + location + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Can only load single resources by absolute URL.</span></span><br><span class="line">      Resource resource = resourceLoader.getResource(location);</span><br><span class="line">      <span class="keyword">int</span> count = loadBeanDefinitions(resource);</span><br><span class="line">      <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">         actualResources.add(resource);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from location [&quot;</span> + location + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="customNote note info"><p>
    接着调用重载方法，说白了，就是通过传入的<code>spring.xml</code>配置文件，解析成resource，然后调用重载
    </p><p>
        类：org.springframework.beans.factory.support.<code>AbstractBeanDefinitionReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(resources, <span class="string">&quot;Resource array must not be null&quot;</span>);</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">      <span class="comment">//模板设计模式，调用到子类中的方法</span></span><br><span class="line">      count += loadBeanDefinitions(resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="customNote note info"><p>
    调用子类<code>XmlBeanDefinitionReader</code>中的loadBeanDefinitions()实现。
    </p><p>
        类：org.springframework.beans.factory.xml.<code>XmlBeanDefinitionReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="comment">//EncodedResource带编码的对Resource对象的封装</span></span><br><span class="line">   <span class="keyword">return</span> loadBeanDefinitions(<span class="keyword">new</span> EncodedResource(resource));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="customNote note info"><p>
    调用重载方法，该重载方法支持带编码。
    </p><p>
        类：org.springframework.beans.factory.xml.<code>XmlBeanDefinitionReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load bean definitions from the specified XML file.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encodedResource the resource descriptor for the XML file,</span></span><br><span class="line"><span class="comment"> * allowing to specify an encoding to use for parsing the file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of bean definitions found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanDefinitionStoreException in case of loading or parsing errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(encodedResource, <span class="string">&quot;EncodedResource must not be null&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">&quot;Loading XML bean definitions from &quot;</span> + encodedResource);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Set&lt;EncodedResource&gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">&quot;Detected cyclic loading of &quot;</span> + encodedResource + <span class="string">&quot; - check your import definitions!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取Resource对象中的xml文件流对象</span></span><br><span class="line">   <span class="keyword">try</span> (InputStream inputStream = encodedResource.getResource().getInputStream()) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//InputSource是jdk中的sax xml文件解析对象</span></span><br><span class="line">      InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</span><br><span class="line">      <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">         inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//主要看这个方法 **  重要程度 5</span></span><br><span class="line">      <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">&quot;IOException parsing XML document from &quot;</span> + encodedResource.getResource(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      currentResources.remove(encodedResource);</span><br><span class="line">      <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">         <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="│-├─-doLoadBeanDefinitions"><a href="#│-├─-doLoadBeanDefinitions" class="headerlink" title="│ ├─ doLoadBeanDefinitions()"></a>│ ├─ doLoadBeanDefinitions()</h2><blockquote class="customNote note info"><p>
    调用doLoadBeanDefinitions方法
    </p><p>
        类：org.springframework.beans.factory.xml.<code>XmlBeanDefinitionReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//把inputSource 封装成Document文件对象，这是jdk的API</span></span><br><span class="line">      Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//主要看这个方法，根据解析出来的document对象，拿到里面的标签元素封装成BeanDefinition</span></span><br><span class="line">      <span class="keyword">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">&quot;Loaded &quot;</span> + count + <span class="string">&quot; bean definitions from &quot;</span> + resource);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (SAXParseException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">&quot;Line &quot;</span> + ex.getLineNumber() + <span class="string">&quot; in XML document from &quot;</span> + resource + <span class="string">&quot; is invalid&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (SAXException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">&quot;XML document from &quot;</span> + resource + <span class="string">&quot; is invalid&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">&quot;Parser configuration exception parsing XML from &quot;</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">&quot;IOException parsing XML document from &quot;</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">&quot;Unexpected exception parsing XML document from &quot;</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="│-├─-registerBeanDefinitions"><a href="#│-├─-registerBeanDefinitions" class="headerlink" title="│ ├─ registerBeanDefinitions()"></a>│ ├─ registerBeanDefinitions()</h2><blockquote class="customNote note info"><p>
    调用registerBeanDefinitions方法
    </p><p>
        类：org.springframework.beans.factory.xml.<code>XmlBeanDefinitionReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="comment">//又来一记委托模式，委托BeanDefinitionDocumentReader这个类进行document的解析</span></span><br><span class="line">   BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">   <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//主要看这个方法，createReaderContext(resource) XmlReaderContext上下文，封装了XmlBeanDefinitionReader对象</span></span><br><span class="line">   documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">   <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="customNote note info"><p>
    调用documentReader委托对象中registerBeanDefinitions方法
    </p><p>
        类：org.springframework.beans.factory.xml.<code>DefaultBeanDefinitionDocumentReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.readerContext = readerContext;</span><br><span class="line">   <span class="comment">//主要看这个方法，把root节点传进去</span></span><br><span class="line">   doRegisterBeanDefinitions(doc.getDocumentElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="│-├─-doRegisterBeanDefinitions"><a href="#│-├─-doRegisterBeanDefinitions" class="headerlink" title="│ ├─ doRegisterBeanDefinitions()"></a>│ ├─ doRegisterBeanDefinitions()</h2><blockquote class="customNote note info"><p>
    调用doRegisterBeanDefinitions方法
    </p><p>
        类：org.springframework.beans.factory.xml.<code>DefaultBeanDefinitionDocumentReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Any nested &lt;beans&gt; elements will cause recursion in this method. In</span></span><br><span class="line">   <span class="comment">// order to propagate and preserve &lt;beans&gt; default-* attributes correctly,</span></span><br><span class="line">   <span class="comment">// keep track of the current (parent) delegate, which may be null. Create</span></span><br><span class="line">   <span class="comment">// the new (child) delegate with a reference to the parent for fallback purposes,</span></span><br><span class="line">   <span class="comment">// then ultimately reset this.delegate back to its original (parent) reference.</span></span><br><span class="line">   <span class="comment">// this behavior emulates a stack of delegates without actually necessitating one.</span></span><br><span class="line">   BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line">   <span class="keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">         String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">               profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">         <span class="comment">// We cannot use Profiles.of(...) since profile expressions are not supported</span></span><br><span class="line">         <span class="comment">// in XML config. See SPR-12458 for details.</span></span><br><span class="line">         <span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="string">&quot;Skipped XML bean definition file due to specified profiles [&quot;</span> + profileSpec +</span><br><span class="line">                     <span class="string">&quot;] not matching: &quot;</span> + getReaderContext().getResource());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   preProcessXml(root);</span><br><span class="line">   <span class="comment">//主要看这个方法，标签具体解析过程</span></span><br><span class="line">   parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">   postProcessXml(root);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="│-├─-parseBeanDefinitions"><a href="#│-├─-parseBeanDefinitions" class="headerlink" title="│ ├─ parseBeanDefinitions()"></a>│ ├─ parseBeanDefinitions()</h2><blockquote class="customNote note info"><p>
    调用parseBeanDefinitions方法,标签解析
    </p><p>
        类：org.springframework.beans.factory.xml.<code>DefaultBeanDefinitionDocumentReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      NodeList nl = root.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">         Node node = nl.item(i);</span><br><span class="line">         <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">               <span class="comment">//默认标签解析</span></span><br><span class="line">               parseDefaultElement(ele, delegate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//自定义标签解析</span></span><br><span class="line">               delegate.parseCustomElement(ele);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      delegate.parseCustomElement(root);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="│-│-├─-parseDefaultElement"><a href="#│-│-├─-parseDefaultElement" class="headerlink" title="│ │ ├─ parseDefaultElement()"></a>│ │ ├─ parseDefaultElement()</h2><blockquote class="customNote note info"><p>
    调用parseDefaultElement方法,走默认标签解析
    </p><p>
        类：org.springframework.beans.factory.xml.<code>DefaultBeanDefinitionDocumentReader</code>
    </p></blockquote>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//import标签解析  重要程度 1 ，可看可不看</span></span><br><span class="line">   <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">      importBeanDefinitionResource(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//alias标签解析 别名标签  重要程度 1 ，可看可不看</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">      processAliasRegistration(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//bean标签，重要程度  5，必须看</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">      processBeanDefinition(ele, delegate);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// recurse</span></span><br><span class="line">      doRegisterBeanDefinitions(ele);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring源码系列</category>
      </categories>
      <tags>
        <tag>xml解析</tag>
      </tags>
  </entry>
</search>
